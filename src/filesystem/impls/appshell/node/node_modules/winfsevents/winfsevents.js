/*
*/

var util = require('util');
var events = require('events');
var binding;
//try {
    binding = require('./build/Release/winfswatch');
//} catch(ex) {
//  binding = require('./build/Debug/fswatch');
//}

var Fs = require('fs');

module.exports = function(path) {
  var winfsevents = new WinFSEvents(path);
  winfsevents.on('fsevent', function(path, flags, id) {
    var info = {
      event:'unknown',
      id:id,
      path: path,
      type: fileType(flags),
      changes: fileChanges(flags),
    };
    if (WinFSEvents.kFSEventStreamEventFlagItemCreated & flags) {
      info.event = 'created';
    } else if (WinFSEvents.kFSEventStreamEventFlagItemRemoved & flags) {
      info.event = 'deleted';
    } else if (WinFSEvents.kFSEventStreamEventFlagItemRenamed & flags) {
      info.event = 'moved';
    } else if (WinFSEvents.kFSEventStreamEventFlagItemModified & flags) {
      info.event = 'modified';
    }

    if (info.event == 'moved') {
      Fs.stat(info.path, function(err, stat) {
      if (err || !stat) {
        info.event = 'moved-out';
      } else {
        info.event = 'moved-in';
      }
      winfsevents.emit('change', path, info);
      winfsevents.emit(info.event, path, info);
    });
    } else {
      winfsevents.emit('change', path, info);
      if (info.event !== 'unknown') winfsevents.emit(info.event, path, info);
    }
  });
  return winfsevents;
};

var WinFSEvents = binding.WinFSEvents;
util.inherits(WinFSEvents, events.EventEmitter);

function fileType(flags) {
  if (WinFSEvents.kFSEventStreamEventFlagItemIsFile & flags) return 'file';
  if (WinFSEvents.kFSEventStreamEventFlagItemIsDir & flags) return 'directory';
  if (WinFSEvents.kFSEventStreamEventFlagItemIsSymlink & flags) return 'symlink';
}

function fileChanges(flags) {
  var res = {};
  res.inode = !!(WinFSEvents.kFSEventStreamEventFlagItemInodeMetaMod & flags);
  res.finder = !!(WinFSEvents.kFSEventStreamEventFlagItemFinderInfoMod & flags);
  res.access = !!(WinFSEvents.kFSEventStreamEventFlagItemChangeOwner & flags);
  res.xattrs = !!(WinFSEvents.kFSEventStreamEventFlagItemXattrMod & flags);
  return res;
}
